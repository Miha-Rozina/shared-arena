name: CI

on: [push, pull_request]

jobs:
  test:
    name: Build & Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Execute tests
        uses: actions-rs/cargo@v1
        with:
          command: test

  addr_sanitizer:
    name: AddressSanitizer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rust-src
      - name: Execute tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -Z build-std --target x86_64-unknown-linux-gnu
        env:
          CFLAGS: "-fsanitize=address"
          CXXFLAGS: "-fsanitize=address"
          RUSTFLAGS: "-Zsanitizer=address"
          RUSTDOCFLAGS: "-Zsanitizer=address"

  mem_sanitizer:
    name: MemorySanitizer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rust-src
      - name: Execute tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -Z build-std --target x86_64-unknown-linux-gnu
        env:
          CFLAGS: "-fsanitize=memory -fsanitize-memory-track-origins"
          CXXFLAGS: "-fsanitize=memory -fsanitize-memory-track-origins"
          RUSTFLAGS: "-Zsanitizer=memory -Zsanitizer-memory-track-origins"
          RUSTDOCFLAGS: "-Zsanitizer=memory -Zsanitizer-memory-track-origins"

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
          # components: rustfmt, clippy

      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: fmt
      #     args: --all -- --check

      - uses: actions-rs/cargo@v1
        # if: always()
        with:
          command: clippy
          args: --all-features -- -D warnings

  grcov:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal

      - name: Execute tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

      - id: coverage
        name: Coverage
        uses: actions-rs/grcov@v0.1

      - uses: codecov/codecov-action@v1
        name: Upload to codecov.io
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          file: ${{ steps.coverage.outputs.report }}
          # file: ./coverage.xml # optional
          # flags: unittests # optional
          # name: codecov-umbrella # optional
          # fail_ci_if_error: true # optional (default = false)

  # benchmark:
  #   name: Benchmark
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         override: true
  #         profile: minimal

  #     - name: Run benchmark
  #       run: cargo bench -- --noplot --output-format bencher | grep --line-buffered test | tee output.txt

  #     - name: Store benchmark result
  #       uses: rhysd/github-action-benchmark@v1
  #       with:
  #         name: Rust Benchmark
  #         tool: 'cargo'
  #         output-file-path: output.txt
  #         github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
  #         auto-push: true
  #         # Show alert with commit comment on detecting possible performance regression
  #         alert-threshold: '10%'
  #         comment-on-alert: true
  #         fail-on-alert: true

  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: miri, rust-src

      - uses: actions-rs/cargo@v1
        name: Setup Miri
        with:
          command: miri
          args: setup

      - uses: actions-rs/cargo@v1
        name: Execute Miri
        with:
          command: miri
          # Ignore leaks because of AtomicPtr:
          # https://github.com/rust-lang/miri/issues/1318
          # Disable isolation to get randomness
          args: test --all-features -- -Zmiri-ignore-leaks -Zmiri-disable-isolation

  build:
    name: Build Cross Platforms
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - arm-linux-androideabi
          - armv7-linux-androideabi
          - arm-unknown-linux-gnueabihf
          - armv7-unknown-linux-gnueabihf
          - powerpc64-unknown-linux-gnu
          - aarch64-linux-android
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
          - i686-pc-windows-gnu
          - i686-pc-windows-msvc
          - i686-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        name: Install toolchain
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        name: Build
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}
